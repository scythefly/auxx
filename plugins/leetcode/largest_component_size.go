package main

import (
	"fmt"
	"math"
)

/*
//
var temp = make([]int, 100010)
func find(x int) int {
	for temp[x] != x {
		temp[x] = temp[temp[x]]
		x = temp[x]
	}
	return x
}

func union(x, y int) {
	a := find(x)
	b := find(y)

	if a != b {
		temp[a] = b
	}
}

func largestComponentSize(A []int) int {
	max := 0
	for i := 0; i < len(A); i++ {
		if max < A[i] {
			max = A[i]
		}
	}

	for i := 0; i < max; i++ {
		temp[i] = i
	}
	for _, val := range A {
		maxS := math.Sqrt(float64(val))
		for j := 2; j <= int(maxS); j++ {
			if val%j == 0 {
				union(val, j)
				union(val, val/j)
			}
		}
	}
	res := 0
	root := make([]int, max+1)
	for _, val := range A {
		cnt := find(val)
		root[cnt]++
		if res < root[cnt] {
			res = root[cnt]
		}
	}
	return res
}
*/

/*
// 枚举
func largestComponentSize(A []int) int {
	var maxC int
	for i := 0; i < len(A); i++ {
		if maxC < A[i] {
			maxC = A[i]
		}
	}

	var ass []map[int]int
	for cp := 2; cp <= maxC; cp++ {
		as := make(map[int]int)
		for i := 0; i < len(A); i++ {
			if A[i]%cp == 0 {
				as[A[i]] = 1
			}
		}

		ass = append(ass, as)
	}
	//fmt.Println(ass)

	var max int
	for i := 0; i < len(ass); i++ {
		as := ass[i]
		if len(as) < 2 {
			continue
		}
		cps := make(map[int]int)
		added := make(map[int]int)
		for n, _ := range as {
			cps[n] = 1
		}
		for j := 0; j < len(ass); j++ {
			if j == i || len(ass[j]) < 2 {
				continue
			}

			if n, ok := added[j]; ok {
				if n == 1 {
					continue
				}
			}
			aj := ass[j]
			for n, _ := range aj {
				//fmt.Println("i = ", i, "j = ", j, "check: ", n, "add: ")
				if _, ok := cps[n]; ok {
					for nn, _ := range aj {
						//fmt.Printf("%d ", nn)
						cps[nn] = 1
						added[j] = 1
					}
					j = 0
				}
				//fmt.Println(cps)
			}
		}
		//fmt.Println(cps)
		if max < len(cps) {
			max = len(cps)
		}
	}

	return max
}
*/

var lists map[int]int

func find(x int) int {
	for x != lists[x] {
		lists[x] = lists[lists[x]]
		x = lists[x]
	}
	return x
}

func union(x, y int) {
	a := find(x)
	b := find(y)

	lists[a] = b
}

func largestComponentSize(A []int) int {
	lists = make(map[int]int)
	max := 0
	for i := 0; i < len(A); i++ {
		if max < A[i] {
			max = A[i]
		}
	}

	for i := 0; i < max; i++ {
		lists[i] = i
	}
	for _, val := range A {
		maxS := math.Sqrt(float64(val))
		for j := 2; j <= int(maxS); j++ {
			if val%j == 0 {
				union(val, j)
				union(val, val/j)
			}
		}
	}
	fmt.Println(lists)
	res := 0
	root := make([]int, max+1)
	for _, val := range A {
		cnt := find(val)
		root[cnt]++
		if res < root[cnt] {
			res = root[cnt]
		}
	}
	return res
}

func LargestComponentSizeTest() {
	//find(2)
	//fmt.Println(largestComponentSize([]int{4, 6, 15, 35}))
	fmt.Println(largestComponentSize([]int{20, 50, 9, 63}))
	//fmt.Println(largestComponentSize([]int{2, 3, 6, 7, 4, 12, 21, 39}))
	/*
		t := time.Now().UnixNano()
		fmt.Println(largestComponentSize([]int{1, 6154, 4113, 6162, 19, 5465, 4125, 9221, 6176, 8229, 4134, 39, 41, 8234, 6187, 46, 2097, 50, 54, 4153, 2106, 8260, 6213, 4167, 6223, 6224, 82, 2132, 8277, 2137, 8286, 2150, 118, 5483, 8328, 4234, 8334, 2191, 6289, 2197, 4246, 1437, 6310, 173, 8367, 180, 4284, 7882, 8389, 2247, 8397, 4305, 8403, 6368, 2288, 242, 4340, 6389, 2294, 249, 251, 254, 2307, 6406, 8459, 4366, 7215, 286, 287, 296, 6441, 298, 4395, 4398, 8502, 314, 8246, 1761, 8524, 4431, 6484, 6201, 1444, 6510, 4463, 8562, 2420, 6519, 386, 392, 2441, 4491, 4496, 6549, 8602, 2466, 425, 6575, 440, 8643, 4549, 6603, 8654, 8655, 4563, 473, 481, 8676, 6642, 8692, 8617, 8703, 6660, 6665, 6669, 2575, 530, 533, 8726, 772, 6684, 8738, 551, 8745, 554, 8748, 4190, 4662, 8761, 2627, 8774, 2631, 2633, 8785, 8786, 6926, 600, 2651, 4701, 8812, 4722, 8819, 8980, 5567, 2684, 637, 1813, 4737, 8844, 8845, 4752, 2711, 8858, 6817, 6939, 6822, 8871, 4778, 2733, 6831, 690, 2741, 694, 699, 703, 4808, 8908, 717, 720, 8915, 1146, 6884, 8936, 6889, 8940, 6910, 2817, 4868, 773, 2830, 784, 788, 4886, 6938, 8987, 8991, 2856, 2861, 2865, 4914, 819, 9017, 9019, 4928, 9027, 9030, 1847, 2894, 9045, 7002, 7006, 7007, 7015, 4971, 7020, 7025, 882, 9083, 898, 7043, 4996, 9095, 911, 5009, 915, 7060, 9109, 918, 5016, 924, 9126, 2983, 7083, 7089, 5046, 7097, 3002, 3004, 5060, 3017, 9719, 3025, 978, 3027, 3038, 5090, 7141, 3053, 1012, 1020, 1021, 3071, 7168, 7173, 7175, 9233, 1043, 7190, 7194, 9244, 3102, 7200, 5157, 7207, 3116, 3117, 9263, 7219, 4617, 5176, 4276, 2911, 5182, 5183, 5186, 1091, 5192, 1099, 7246, 1116, 7269, 1126, 7272, 1139, 1143, 7290, 9347, 5252, 7301, 1158, 9351, 5269, 7318, 5271, 3227, 1181, 3231, 5280, 1185, 1188, 5289, 7338, 3245, 7360, 1229, 7375, 5328, 9427, 3280, 3299, 3307, 1260, 3309, 5360, 7410, 5364, 3317, 1271, 9472, 3329, 3332, 3333, 7432, 1291, 9494, 9497, 3355, 9512, 7467, 1339, 3390, 9535, 3398, 7495, 5448, 9783, 9550, 1364, 7513, 9564, 7521, 9574, 3431, 9576, 7531, 5495, 9596, 5502, 8771, 9620, 1433, 5530, 3483, 7581, 3488, 9633, 7588, 7589, 1449, 583, 6386, 1459, 3515, 9461, 9667, 4342, 9677, 2299, 1515, 3564, 7663, 5620, 4347, 1532, 7679, 3585, 9730, 7692, 9816, 1555, 7707, 9756, 1567, 8795, 5668, 3622, 945, 7721, 1579, 5677, 3635, 1591, 5688, 5696, 1614, 9807, 3664, 3665, 5717, 7767, 1624, 9818, 3677, 7775, 1632, 7780, 1640, 1642, 5743, 9832, 5748, 7804, 9855, 5760, 1665, 7812, 3350, 7814, 9864, 6764, 3734, 7833, 5787, 7837, 5790, 1697, 1307, 3754, 9901, 9908, 5818, 7868, 1733, 3786, 1739, 5836, 9937, 7890, 9940, 1752, 3802, 5852, 3807, 3809, 5858, 3817, 5867, 9965, 5874, 6783, 1799, 9992, 7948, 5901, 5904, 5905, 3129, 1820, 1822, 3879, 3891, 1673, 1851, 5956, 1869, 5974, 5975, 3931, 1889, 9531, 3943, 1903, 3955, 8053, 6011, 1916, 1921, 5782, 6022, 8074, 3981, 1937, 1940, 6044, 1952, 8097, 6050, 6051, 8129, 6086, 4053, 2008, 6110, 6112, 4065, 7165, 2388}))
		t1 := time.Now().UnixNano()
		fmt.Printf("--- %d ---\n", t1 - t)
		fmt.Println(largestComponentSize([]int{516, 389, 777, 13, 402, 660, 278, 151, 132, 794, 668, 858, 670, 671, 33, 164, 294, 295, 425, 301, 46, 304, 691, 953, 31, 316, 446, 836, 200, 74, 715, 332, 974, 463, 212, 853, 346, 865, 999, 618, 103, 236, 239, 114, 758, 631, 20, 637, 511}))
		t = time.Now().UnixNano()
		fmt.Printf("--- %d ---\n", t - t1)
		fmt.Println(largestComponentSize([]int{5803, 6153, 13, 2062, 6161, 2068, 7172, 8219, 6174, 2080, 36, 4138, 6188, 8237, 46, 8240, 8242, 4151, 6202, 8253, 8269, 2126, 6226, 2135, 4187, 97, 102, 9233, 6263, 126, 3776, 2178, 4233, 8330, 9581, 8342, 152, 6297, 5487, 4253, 8350, 2208, 6308, 4262, 4263, 6314, 1053, 8373, 184, 4281, 2242, 8388, 6346, 6352, 2258, 6355, 2261, 2084, 4815, 6365, 2270, 225, 4330, 4333, 6525, 4341, 6390, 3455, 4355, 262, 8456, 6410, 2318, 6873, 4379, 6435, 297, 2439, 302, 2364, 2372, 334, 4431, 2387, 340, 8590, 345, 2400, 8548, 6508, 367, 4466, 371, 6516, 2429, 2662, 391, 2442, 8589, 398, 8595, 2452, 4506, 415, 2467, 8612, 8615, 4525, 6578, 8627, 4535, 2489, 445, 4542, 447, 8644, 4558, 629, 6611, 4567, 6564, 6620, 4582, 6638, 496, 4596, 2549, 4605, 513, 6660, 8714, 4620, 2579, 2585, 6685, 544, 4644, 557, 8816, 6717, 8767, 6723, 2628, 582, 4679, 3853, 4689, 2643, 599, 4700, 614, 8807, 618, 4882, 6768, 626, 4724, 2677, 2689, 642, 4740, 6790, 4749, 158, 8848, 5913, 4769, 2724, 2730, 4779, 8897, 717, 2206, 719, 2769, 8916, 6871, 4825, 2788, 8934, 6890, 751, 6898, 4855, 2811, 8960, 4915, 8967, 4877, 786, 2835, 2843, 2848, 6945, 2851, 8997, 2856, 6958, 6961, 9011, 9012, 9014, 6976, 4931, 4932, 842, 7309, 4947, 9046, 7001, 2910, 9055, 2917, 1169, 7017, 874, 7655, 9072, 2931, 9078, 2935, 9024, 7044, 9103, 912, 9105, 923, 5021, 7071, 1520, 5029, 2982, 5033, 2987, 7089, 7667, 2997, 950, 7533, 7096, 954, 6033, 5059, 970, 9719, 973, 3023, 1669, 5075, 3034, 2895, 5084, 9181, 7141, 7142, 3050, 9196, 7150, 9201, 1015, 5116, 9220, 9223, 3083, 1036, 1041, 175, 7197, 1055, 1057, 3108, 3109, 7212, 3123, 5173, 7223, 1081, 7007, 1085, 3143, 9293, 5424, 5205, 1893, 7266, 1128, 9325, 1146, 1157, 5258, 9357, 1166, 9361, 7325, 9385, 9392, 7346, 3254, 1208, 5309, 9412, 9416, 5321, 1229, 7374, 1238, 5339, 9436, 5344, 1254, 9451, 5368, 3326, 5376, 1282, 2945, 3341, 3343, 7440, 7441, 1298, 3348, 5397, 5398, 3351, 3633, 5416, 7465, 3975, 1325, 3376, 1335, 3385, 9536, 7492, 5445, 3399, 3402, 3408, 5462, 9559, 9934, 5474, 1383, 3437, 7535, 9593, 9597, 1406, 5503, 7555, 5511, 3464, 1423, 7568, 7570, 3651, 7573, 3481, 1437, 7589, 3496, 9649, 5559, 9665, 1474, 7627, 1487, 7632, 1495, 5592, 9126, 3558, 593, 7657, 9708, 3568, 5618, 595, 3575, 5625, 3583, 1536, 1537, 5634, 9131, 7685, 5646, 3601, 1556, 7705, 9757, 1572, 9777, 3635, 7736, 5692, 9795, 3656, 7773, 6758, 7783, 7792, 9842, 9847, 1667, 7813, 8813, 9873, 1682, 1683, 9880, 1648, 9899, 3756, 1710, 5811, 3769, 9916, 7114, 4725, 1728, 9924, 5835, 3790, 4387, 740, 7906, 5859, 1778, 3828, 3830, 1784, 9983, 1799, 9994, 5901, 1807, 1810, 5909, 8836, 1818, 5919, 5921, 1827, 7978, 5931, 3900, 1853, 7998, 3907, 8005, 8012, 3925, 8030, 3935, 3940, 5989, 8038, 3730, 5998, 3953, 8054, 1914, 6020, 6023, 1931, 1934, 6031, 8080, 1688, 8516, 1955, 4006, 4007, 6059, 6064, 1981, 4037, 6087, 1999, 2002, 4054, 8159, 4072, 6124, 2032, 4083, 2037, 8186}))
		t1 = time.Now().UnixNano()
		fmt.Printf("--- %d ---\n", t1 - t)
	*/
}
